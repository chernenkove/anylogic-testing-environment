<?xml version="1.0" encoding="UTF-8"?>
<!--
*************************************************
	         AnyLogic Project File 
*************************************************	         
-->
<AnyLogicWorkspace WorkspaceVersion="1.9" AnyLogicVersion="7.3.7.201703161658" AlpVersion="7.3.3">
<Model>
	<Id>1630303970950</Id>
	<Name><![CDATA[UnitTests]]></Name>
	<EngineVersion>6</EngineVersion>
	<JavaPackageName><![CDATA[unittests]]></JavaPackageName>
	<ModelTimeUnit><![CDATA[Minute]]></ModelTimeUnit>
	<ActiveObjectClasses>
		<!--   =========   Active Object Class   ========  -->
		<ActiveObjectClass>
			<Id>1630303970955</Id>
			<Name><![CDATA[Main]]></Name>
			<ClientAreaTopLeft><X>0</X><Y>0</Y></ClientAreaTopLeft>
			<PresentationTopGroupPersistent>true</PresentationTopGroupPersistent>
			<IconTopGroupPersistent>true</IconTopGroupPersistent>
			<Generic>false</Generic>
			<GenericParameter>
				<Id>1630303970954</Id>
				<Name><![CDATA[1630303970954]]></Name>
				<GenericParameterValue Class="CodeValue">
					<Code><![CDATA[T extends Agent]]></Code>
				</GenericParameterValue>
				<GenericParameterLabel><![CDATA[Параметр настройки:]]></GenericParameterLabel>
			</GenericParameter>
			<FlowChartsUsage>ENTITY</FlowChartsUsage>
			<SamplesToKeep>100</SamplesToKeep>
			<LimitNumberOfArrayElements>false</LimitNumberOfArrayElements>
			<ElementsLimitValue>100</ElementsLimitValue>
			<MakeDefaultViewArea>true</MakeDefaultViewArea>
			<SceneGridColor/>
			<SceneBackgroundColor/>
			<AgentProperties>
	 			<SpaceType>CONTINUOUS</SpaceType>			
				<EnvironmentDefinesInitialLocation>true</EnvironmentDefinesInitialLocation>
				<RotateAnimationTowardsMovement>true</RotateAnimationTowardsMovement>
				<RotateAnimationVertically>false</RotateAnimationVertically>
				<VelocityCode Class="CodeUnitValue">
					<Code><![CDATA[10]]></Code>
					<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
				</VelocityCode>
			</AgentProperties>
			<EnvironmentProperties>
					<EnableSteps>false</EnableSteps>
					<StepDurationCode Class="CodeUnitValue">
						<Code><![CDATA[1.0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</StepDurationCode>
					<SpaceType>CONTINUOUS</SpaceType>
					<WidthCode><![CDATA[500]]></WidthCode>
					<HeightCode><![CDATA[500]]></HeightCode>
					<ZHeightCode><![CDATA[0]]></ZHeightCode>
					<ColumnsCountCode><![CDATA[100]]></ColumnsCountCode>
					<RowsCountCode><![CDATA[100]]></RowsCountCode>
					<NeigborhoodType>MOORE</NeigborhoodType>
					<LayoutType>USER_DEF</LayoutType>
					<LayoutTypeApplyOnStartup>true</LayoutTypeApplyOnStartup>
					<NetworkType>USER_DEF</NetworkType>
					<NetworkTypeApplyOnStartup>true</NetworkTypeApplyOnStartup>
					<ConnectionsPerAgentCode><![CDATA[2]]></ConnectionsPerAgentCode>
					<ConnectionsRangeCode><![CDATA[50]]></ConnectionsRangeCode>
					<NeighborLinkFractionCode><![CDATA[0.95]]></NeighborLinkFractionCode>
					<MCode><![CDATA[10]]></MCode>
			</EnvironmentProperties>
			<DatasetsCreationProperties>
				<AutoCreate>true</AutoCreate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1630310400000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</RecurrenceCode>
			</DatasetsCreationProperties>
			<ScaleRuler>
				<Id>1630303970952</Id>
				<Name><![CDATA[scale]]></Name>
				<X>0</X><Y>-150</Y>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>false</PresentationFlag>
				<ShowLabel>false</ShowLabel>
				<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
				<Length>100</Length>
				<Rotation>0</Rotation>
				<ScaleType>BASED_ON_LENGTH</ScaleType>
				<ModelLength>10</ModelLength>
				<LengthUnits>METER</LengthUnits>
				<Scale>10</Scale>
				<InheritedFromParentAgentType>true</InheritedFromParentAgentType>
			</ScaleRuler>
			<ConnectionsId>1630303970951</ConnectionsId>
			<AgentLinks>
				<AgentLink>
					<Id>1630303970951</Id>
					<Name><![CDATA[connections]]></Name>
					<X>50</X><Y>-50</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<HandleReceiveInConnections>false</HandleReceiveInConnections>
					<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
					<AgentLinkBidirectional>true</AgentLinkBidirectional>
					<MessageType><![CDATA[Object]]></MessageType>
					<LineStyle>SOLID</LineStyle>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineZOrder>UNDER_AGENTS</LineZOrder>
					<LineArrow>NONE</LineArrow>
					<LineArrowPosition>END</LineArrowPosition>
				</AgentLink>
			</AgentLinks>



		</ActiveObjectClass>
	</ActiveObjectClasses>	
	<DifferentialEquationsMethod>EULER</DifferentialEquationsMethod>
	<MixedEquationsMethod>RK45_NEWTON</MixedEquationsMethod>
	<AlgebraicEquationsMethod>MODIFIED_NEWTON</AlgebraicEquationsMethod>
	<AbsoluteAccuracy>1.0E-5</AbsoluteAccuracy>
	<FixedTimeStep>0.001</FixedTimeStep>
	<RelativeAccuracy>1.0E-5</RelativeAccuracy>
	<TimeAccuracy>1.0E-5</TimeAccuracy>
	<Database>
		<Logging>false</Logging>
		<AutoExport>false</AutoExport>
		<ImportSettings>
		</ImportSettings>
		<ExportSettings>
			<ExportExcelFilePath><![CDATA[]]></ExportExcelFilePath>
		</ExportSettings>
	</Database>	
	<Experiments>	
		<!--   =========   Simulation Experiment   ========  -->
		<SimulationExperiment ActiveObjectClassId="1630303970955">
			<Id>1630303970957</Id>
			<Name><![CDATA[Tests]]></Name>
			<ClientAreaTopLeft><X>0</X><Y>0</Y></ClientAreaTopLeft>
			<PresentationTopGroupPersistent>true</PresentationTopGroupPersistent>
			<IconTopGroupPersistent>true</IconTopGroupPersistent>
			<Frame>
				<X>0</X>
				<Y>0</Y>
				<Width>1000</Width>
				<Height>600</Height>
				<Maximized>false</Maximized>
				<CloseConfirmation>false</CloseConfirmation>
			</Frame>
			<Import><![CDATA[import org.junit.runner.JUnitCore;
import org.junit.runner.Result;
import org.junit.runner.notification.Failure;]]></Import>
			<CommandLineArguments><![CDATA[]]></CommandLineArguments>
			<MaximumMemory>256</MaximumMemory>
			<RandomNumberGenerationType>fixedSeed</RandomNumberGenerationType>
			<CustomGeneratorCode>new Random()</CustomGeneratorCode>
			<SeedValue>1</SeedValue>
			<SelectionModeForSimultaneousEvents>LIFO</SelectionModeForSimultaneousEvents>
			<VmArgs><![CDATA[]]></VmArgs>
			<LoadRootFromSnapshot>false</LoadRootFromSnapshot>
			<SnapshotFile></SnapshotFile>
			<Variables>
				<Variable Class="PlainVariable">
					<Id>1630304166237</Id>
					<Name><![CDATA[unitTestClasses]]></Name>
					<X>50</X><Y>-120</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[Class[]]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[{	
	SimpleModelTest.class,
	SimpleTest.class,
	ManyTests.class,
	SingleRunTest.class
}]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1630304166239</Id>
					<Name><![CDATA[runTestsCount]]></Name>
					<X>50</X><Y>-160</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1630304166241</Id>
					<Name><![CDATA[failuresCount]]></Name>
					<X>50</X><Y>-140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
					</Properties>
				</Variable>
			</Variables>
			<Functions>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1630304166229</Id>
					<Name><![CDATA[runUnitTestClass]]></Name>
					<X>50</X><Y>-70</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[theClass]]></Name>
						<Type><![CDATA[Class]]></Type>
					</Parameter>
					<Body><![CDATA[Result result = JUnitCore.runClasses( theClass );
runTestsCount += result.getRunCount();
failuresCount += result.getFailureCount();
for( Failure failure : result.getFailures() ) {
	traceln( failure.toString() + System.getProperty( "line.separator" ) + getSignificantStackTracePart( failure.getTrace() ) );
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1630304166233</Id>
					<Name><![CDATA[runAllTests]]></Name>
					<X>50</X><Y>-90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[runTestsCount = 0;
failuresCount = 0;
for( Class unitTestClass : unitTestClasses ) {
	runUnitTestClass( unitTestClass );
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[String]]></ReturnType>
					<Id>1630304166235</Id>
					<Name><![CDATA[getSignificantStackTracePart]]></Name>
					<X>50</X><Y>-50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[stackTrace]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[int begin = stackTrace.indexOf( "at " + this.getClass().getPackage().getName() + "." );
if( begin >= 0 ) {
	int end = stackTrace.indexOf( "at ", begin + 2 );
	if( end >= 0 ) {
		return stackTrace.substring( begin, end );
	}
}
return stackTrace;]]></Body>
				</Function>
			</Functions>

			<Shapes>
				<Text>
					<Id>1630303970958</Id>
					<Name><![CDATA[text]]></Name>
					<X>40</X><Y>30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<AsObject>true</AsObject>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[UnitTests]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>24</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1630304006772</Id>
					<Name><![CDATA[text1]]></Name>
					<X>30</X><Y>120</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<AsObject>true</AsObject>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<ColorCode><![CDATA[runTestsCount == 0 ? black :
failuresCount > 0 ? red : darkGreen]]></ColorCode>
					<Text><![CDATA[Run 1067 tests, 45 tests failed, see the failures in console]]></Text>
					<TextCode><![CDATA["Run " + runTestsCount + " tests, " + failuresCount + " tests failed" + ( failuresCount > 0 ? ", see the failures in console" : "" )]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
			</Shapes>
			<Controls>
				<Control Type="Button">
				 	<EmbeddedIcon>false</EmbeddedIcon>				
					<Id>1630304006780</Id>
					<Name><![CDATA[button1]]></Name>
					<X>30</X><Y>80</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<BasicProperties Width="330" Height="30" 
				AsObject="true">
                        <EmbeddedIcon>false</EmbeddedIcon>				
						<FillColor/>
						<TextColor/>
						<Enabled>true</Enabled>
						<ActionCode><![CDATA[runAllTests();]]></ActionCode>
					</BasicProperties>
					<ExtendedProperties>
						<Font Name="Dialog" Size="11" Style="0"/>
						<LabelText><![CDATA[Run unit tests]]></LabelText>
					</ExtendedProperties>
				</Control>
				<Control Type="Button">
				 	<EmbeddedIcon>false</EmbeddedIcon>				
					<Id>1630320672347</Id>
					<Name><![CDATA[button]]></Name>
					<X>450</X><Y>80</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<BasicProperties Width="150" Height="30" 
				AsObject="true">
                        <EmbeddedIcon>false</EmbeddedIcon>				
						<FillColor/>
						<TextColor/>
						<Enabled>true</Enabled>
						<ActionCode><![CDATA[SimpleModelTest smt = new SimpleModelTest();
smt.run();]]></ActionCode>
					</BasicProperties>
					<ExtendedProperties>
						<Font Name="Dialog" Size="11" Style="0"/>
						<LabelText><![CDATA[Simple model test]]></LabelText>
					</ExtendedProperties>
				</Control>
				<Control Type="Button">
				 	<EmbeddedIcon>false</EmbeddedIcon>				
					<Id>1630577649092</Id>
					<Name><![CDATA[button2]]></Name>
					<X>450</X><Y>130</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<BasicProperties Width="150" Height="30" 
				AsObject="true">
                        <EmbeddedIcon>false</EmbeddedIcon>				
						<FillColor/>
						<TextColor/>
						<Enabled>true</Enabled>
						<ActionCode><![CDATA[SingleRunTest mmt = new SingleRunTest();
mmt.run();]]></ActionCode>
					</BasicProperties>
					<ExtendedProperties>
						<Font Name="Dialog" Size="11" Style="0"/>
						<LabelText><![CDATA[Manual model test]]></LabelText>
					</ExtendedProperties>
				</Control>
			</Controls>

			<Parameters>			
			</Parameters>			
			<PresentationProperties 
				EnableAdaptiveFrameManagement="true" 
				EnableAntiAliasing="true"
				EnableEnhancedModelElementsAnimation="true"
				EnablePanning="true"
				ToolbarCustomizableAtRuntime="true"
				EnableZoom="true">
				<ExecutionMode><![CDATA[realTimeScaled]]></ExecutionMode>
				<CpuRatio><![CDATA[ratio_1_2]]></CpuRatio>	        
				<Title><![CDATA[UnitTests : Simulation]]></Title>	
				<FramesPerSecond><![CDATA[20.0]]></FramesPerSecond>
				<RealTimeScale>1.0</RealTimeScale>
				<UIProperty Name="Experiment Progress" Value="false"/>
				<UIProperty Name="Simulation Progress" Value="true"/>
				<UIProperty Name="Statusbar Events Per Second" Value="false"/>
				<UIProperty Name="Statusbar Frames Per Second" Value="false"/>
				<UIProperty Name="Statusbar Memory" Value="true"/>
				<UIProperty Name="Statusbar Model Date" Value="true"/>
				<UIProperty Name="Statusbar Model Step" Value="false"/>
				<UIProperty Name="Statusbar Model Time" Value="true"/>
				<UIProperty Name="Statusbar Real Time Of Simulation" Value="false"/>
				<UIProperty Name="Statusbar Status" Value="true"/>
				<UIProperty Name="Toolbar Animation setup" Value="false"/>
				<UIProperty Name="Toolbar Execution control" Value="true"/>
				<UIProperty Name="Toolbar File" Value="false"/>
				<UIProperty Name="Toolbar Model navigation" Value="true"/>
				<UIProperty Name="Toolbar Time scale setup" Value="true"/>
				<UIProperty Name="Toolbar View" Value="false"/>
			</PresentationProperties>
			<ModelTimeProperties>
				<StopOption><![CDATA[Never]]></StopOption>
				<InitialDate><![CDATA[1630281600000]]></InitialDate>	
				<InitialTime><![CDATA[0.0]]></InitialTime>	
				<FinalDate><![CDATA[1632960000000]]></FinalDate>	
				<FinalTime><![CDATA[100.0]]></FinalTime>	
			</ModelTimeProperties>
		</SimulationExperiment>	
	</Experiments>
	<JavaClasses>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1630304209351</Id>
			<Name><![CDATA[SimpleTest]]></Name>
			<Text><![CDATA[import static org.junit.Assert.*;
import org.junit.Test;
/**
 * SimpleTest
 */	
public class SimpleTest {

	@Test
	public void firstTest(){
		fail("Not yet implemented");
	}
	
	@Test
	public void secondTest(){
		assertTrue( true );
	}

}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1630304889978</Id>
			<Name><![CDATA[ModelTest]]></Name>
			<Text><![CDATA[import java.util.function.Consumer;

import modelundertest.ExperimentExecutor;
import modelundertest.ModelEnvironment;

/**
 * ModelTest
 */	
public abstract class ModelTest {

	protected Scenario scenario;
	protected ModelEnvironment modelEnvironment;
	private Consumer<ModelEnvironment> beforeSimulationStart;
	private Consumer<ModelEnvironment> afterSimulationFinished;

    public ModelTest() {
		this.beforeSimulationStart = this::beforeSimulationStart;
		this.afterSimulationFinished = this::afterSimulationFinished;
    }
    
	protected void doAtTime( double time, Runnable runnable ) {
		modelEnvironment.create_AuxDynamicEvent(time, runnable);
	}
	
    
	protected void beforeSimulationStart(ModelEnvironment mineEnvironment) {	
		mineEnvironment.getEngine().setStartDate( scenario.getBeginDate() );
		mineEnvironment.getEngine().setStopDate( scenario.getEndDate() );
	}
	
	protected void afterSimulationFinished(ModelEnvironment mineEnvironment) {

	}
	
	// Method for runing simulation model with animaton, for visual checking correctness of simulation 
	public void run(){
		Simulation simulation = new Simulation();
		simulation.beforeSimulationRun = ( root )->{
			modelEnvironment = root.modelEnvironment;
			root.modelEnvironment.beforeSimulationStart = ( modelEnvironment -> {
				beforeSimulationStart.accept( modelEnvironment );
			});
			root.modelEnvironment.afterSimulationFinished =  ( modelEnvironment -> {
				afterSimulationFinished.accept( modelEnvironment );
			});
			root.modelEnvironment.scenario = scenario;
		};
		simulation.currentScenario = scenario;				
		simulation.setup(null);
		simulation.runTheModel();
	}
	
	// Method for runing simulation model under jUnit test
	public void executeTest() {		
		ExperimentExecutor executor = new ExperimentExecutor(null);
		executor.beforeSimulationStart = ( modelEnvironment -> {
			this.modelEnvironment = modelEnvironment;
			beforeSimulationStart.accept( modelEnvironment );
		});
		executor.afterSimulationFinished =  ( modelEnvironment -> {
			afterSimulationFinished.accept( modelEnvironment );
		});
		executor.currentScenario = scenario;	
		executor.run();		
	}

}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1630319375356</Id>
			<Name><![CDATA[SimpleModelTest]]></Name>
			<Text><![CDATA[import org.junit.Test;
import static org.junit.Assert.*;
/**
 * SimpleModelTest
 */	
public class SimpleModelTest extends unittests.ModelTest {

    public SimpleModelTest() {
    	scenario = new Scenario("Простой сценарий!",  
    			"01.01.2021",
    			"02.01.2021",
				 3,
				 50,
				 1000,
				 200,
				 1000,
				 300);
    }

	@Test
	public void runTest(){
		SimpleModelTest test = new SimpleModelTest();
		test.executeTest();	

		assertEquals( 	"Материальный баланс", 
						test.modelEnvironment.sourceTank.amountPassedOut(), 
						test.modelEnvironment.destTank.amountPassedIn(), 
						1 );
	}

}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1630573444639</Id>
			<Name><![CDATA[ManyTests]]></Name>
			<Text><![CDATA[import org.junit.Test;
import static org.junit.Assert.*;
/**
 * ManyTests
 */	
public class ManyTests extends unittests.ModelTest {

    public ManyTests() {
    	scenario = new Scenario("Простой сценарий!",  
				 "01.01.2021", 
				 "02.01.2021", 
				 3,
				 50,
				 5000,
				 200,
				 1000,
				 300);
    }

	@Test
	public void runTest1(){
		ManyTests test = new ManyTests();
		test.scenario.setTruckCount( 1 );
		test.executeTest();	
		assertEquals( "Truck count", 1, test.modelEnvironment.trucks.size() );
	}
	
	@Test
	public void runTest2(){
		ManyTests test = new ManyTests();
		test.scenario.setTruckCount(2);
		test.executeTest();	
		assertEquals( "Truck count", 2, test.modelEnvironment.trucks.size() );
	}
	
	@Test
	public void runTest3(){
		ManyTests test = new ManyTests();
		test.scenario.setTruckCount(3);
		test.executeTest();	
		assertEquals( "Truck count", 3, test.modelEnvironment.trucks.size() );
	}
}]]></Text>
		</JavaClass>
		<!--   =========   Java Class   ========  -->
		<JavaClass>
			<Id>1630577556502</Id>
			<Name><![CDATA[SingleRunTest]]></Name>
			<Text><![CDATA[import static org.junit.Assert.*;
import org.junit.Test;
/**
 * ManualModelTest
 */	
public class SingleRunTest extends unittests.ModelTest {

    /**
     * Default constructor
     */	
	private Truck truck;
	private Date startScenarioDate;
	private double sourceStockAtTime0;
	private double sourceStockAtTime20;
	private double destStockAtTime20;
	private double destAmountPassedInAt25;
	private boolean truckIsIdleAt30;
	
	
    public SingleRunTest() {

    	scenario = new Scenario("Простой сценарий!",  
    			"01.01.2021",
    			"02.01.2021",
				 3,
				 100,
				 1000,
				 200,
				 1000,
				 0);
    }
    
    @Override
    protected void beforeSimulationStart(ModelEnvironment modelEnvironment) {
    	super.beforeSimulationStart(modelEnvironment);    	
    	
    	// Переводим модель в режим тестирвоания
    	modelEnvironment.executionMode = ModelEnvironment.Mode.TEST;
  
    	startScenarioDate = modelEnvironment.date();
        sourceStockAtTime0 = modelEnvironment.sourceTank.amount();
    	
        doAtTime( 10, () -> {
    		truck = modelEnvironment.trucks.get(0);									  // первый грузовик
    		truck.startTask( new TransportationTask( modelEnvironment.sourceNode,     // позиция загрузки
    												 modelEnvironment.loadingEnter,   // блок Enter загрузки
    												 modelEnvironment.destNode, 	  // позиция разгрузки
    												 modelEnvironment.unloadingEnter, // блок Enter разгрузки
    												 1								  // количество рейсов 
    												 ));
    	});
        
    	doAtTime( 20, () -> {
    		sourceStockAtTime20 = modelEnvironment.sourceTank.amount();
    		destStockAtTime20 = modelEnvironment.destTank.amount();
    	});
    	
    	doAtTime( 25, () -> {
    		destAmountPassedInAt25 = modelEnvironment.destTank.amountPassedIn();
    	});
    	
    	doAtTime( 30, () -> {
    		truckIsIdleAt30 = truck.isIdle();
    	});
    }
    
	@Test
	public void runTest(){
		SingleRunTest test = new SingleRunTest();
		test.executeTest();	
		// Проверка корректности даты начала моделирования
		assertEquals("startScenarioDate", scenario.getBeginDate(), test.startScenarioDate);
		// Проверка корректной начальной инициализции бункера
		assertEquals( "sourceStockAtTime0", scenario.getSourceBunkerInitStock(), test.sourceStockAtTime0, 0);
		// Принимая во внимание что в момент 20 минут грузовик должен быть в пути на разгрузку
		// Проверка состояний sourceTank и destTank
		assertEquals( "Source tank at 20", 100, test.sourceStockAtTime20, 1 );
		assertEquals( "Dest tank at 20", 0, test.destStockAtTime20, 1 );
		// Проверка факта разгрузки грузовика в destTunk в момент 25 минут
		assertEquals( "Разгурзился", 100, test.destAmountPassedInAt25, 1 );
		// Проверка нахождения грузовика в гараже в 30 минут модельного времени
		assertEquals( "Idle", true, test.truckIsIdleAt30 );
	}
}


]]></Text>
		</JavaClass>
	</JavaClasses>
    <RequiredLibraryReference>
		<LibraryName><![CDATA[animationtest]]></LibraryName>
		<VersionMajor>0</VersionMajor>
		<VersionMinor>0</VersionMinor>
		<VersionBuild>0</VersionBuild>
    </RequiredLibraryReference>
    <RequiredLibraryReference>
		<LibraryName><![CDATA[modelundertest]]></LibraryName>
		<VersionMajor>0</VersionMajor>
		<VersionMinor>0</VersionMinor>
		<VersionBuild>0</VersionBuild>
    </RequiredLibraryReference>
    <RequiredLibraryReference>
		<LibraryName><![CDATA[datamodel]]></LibraryName>
		<VersionMajor>0</VersionMajor>
		<VersionMinor>0</VersionMinor>
		<VersionBuild>0</VersionBuild>
    </RequiredLibraryReference>
	<ClassPathEntry>
		<Location><![CDATA[junit.jar]]></Location>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
	<ClassPathEntry>
		<Location><![CDATA[org.hamcrest.core_1.3.0.v201303031735.jar]]></Location>
		<Imported>true</Imported>
		<Folder>false</Folder>
	</ClassPathEntry>
</Model>
</AnyLogicWorkspace>